----- Iterators -----

Simple example:
[*1..100].select     { |n| n.even? }      # => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
         .reject     { |n| n % 10 == 4 }  # => [2, 6, 8, 10, 12, 16, 18, 20, 22, 26, 28, 30, 32, 36, 38, 40, 42, 46, 48, 50, 52, 56, 58, 60, 62, 66, 68, 70, 72, 76, 78, 80, 82, 86, 88, 90, 92, 96, 98, 100]
         .take_while { |n| n < 50 }       # => [2, 6, 8, 10, 12, 16, 18, 20, 22, 26, 28, 30, 32, 36, 38, 40, 42, 46, 48]
         .map        { |n| n / 2 }        # => [1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24]
         .inject(0, :+)                   # => 240

Show example of Seeing Is Believing:
  =begin
  alkdjsflksdjfklsjfklsdjfklsdj
  alkdjsflksdjfklsjfklsdjfklsdj
  alkdjsflksdjfklsjfklsdjfklsdj
  =end

  1+1             # => 2

  # alkdjsflksdjfklsjfklsdjfklsdj
  5.times do |i|
    i             # => 0, 1, 2, 3, 4
  end             # => 5

How does it know to put the magic comments right there?
How would you figure out how far off to the right to put them?
Here is how I did it: https://github.com/JoshCheek/seeing_is_believing/blob/496c5350c1e641d9d26213af1a3ebc56b1e38205/lib/seeing_is_believing/binary/print_results_next_to_lines.rb#L85-94

----- Example -----

You should be familiar with blocks.
Define a class Apprentices that has an #each method
Show how it looks like iterating over an array, but we can't do other things like #map
Define #map
Define List
Copy/Paste #map into List
Extract #map into a module

Show laziness
  %w[a b c].map.with_index(3) { |char, index|
    char
    index
    char * index
  }

Enable laziness (define a MyEnumerator)

----- Result -----

  module MyEnumerable
    def my_map(&block)
      if !block
        return MyEnumerator.new(self, :my_map)
      end

      names = []
      my_each do |name|
        new_name = block.call name
        names << new_name
      end
      names
    end
  end

  class MyEnumerator
    def initialize(object, method)
      @object, @method = object, method
    end

    def my_with_index(&block)
      index = -1
      @object.__send__ @method do |name|
        index += 1
        block.call name, index
      end
    end
  end

  class Apprentices
    include MyEnumerable
    def my_each(&block)
      block.call 'Kelly'
      block.call 'Rylan'
      block.call 'Rick'
    end
  end

  class List
    include MyEnumerable

    def initialize(data, next_node)
      @data, @next_node = data, next_node
    end

    def my_each(&block)
      block.call @data
      @next_node.my_each(&block) if @next_node
    end
  end

  apprentices1 = Apprentices.new
  apprentices2 = List.new('Angeleah', List.new('Alejandra', List.new('Alejandro', nil)))

  apprentices1.my_map { |name| name.upcase } # => ["KELLY", "RYLAN", "RICK"]
  apprentices2.my_map { |name| name.upcase } # => ["ANGELEAH", "ALEJANDRA", "ALEJANDRO"]

  apprentices1.my_map.my_with_index { |name, index| name[index,2] } # => ["Ke", "yl", "ck"]
  apprentices2.my_map.my_with_index { |name, index| name[index,2] } # => ["An", "le", "ej"]

----- Docs -----

Docs: http://rdoc.info/stdlib/core/Enumerable
      http://rdoc.info/stdlib/core/Enumerator

